name: Create new DB, copy data from staging

on:
    pull_request:
        types: [opened]

env:
    source_db_name: main # the db to grab the data from
    target_db_name: pr-${{ github.event.number }}
    db_user: ${{ secrets.DB_USER }}
    db_password: ${{ secrets.DB_PASSWORD }}

    migration_source_branch: main # the branch to grab migrations from

    neon_project_id: fancy-mouse-984056
    neon_api_key: ${{ secrets.NEON_API_KEY }}
    neon_db_owner: 408233

    azure_function_key: ${{ secrets.AZURE_FUNCTION_KEY }}

jobs:
    create-new-db:
        # Skip workflow if PR has 'dependencies' label or is opened by 'dependabot[bot]'
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'dependencies') && github.event.pull_request.user.login != 'dependabot[bot]' }}
        runs-on: ubuntu-latest
        steps:
            - name: Tell neon to create a new database
              run: |
                  curl -X POST 'https://console.neon.tech/api/v1/projects/${{ env.neon_project_id }}/databases' \
                      -H 'accept: application/json' \
                      -H 'Content-Type: application/json' \
                      -H 'Authorization: Bearer ${{ env.neon_api_key }}' \
                      -d '{ "database": { "name": "${{ env.target_db_name }}", "owner_id": ${{ env.neon_db_owner }} } }' \
                      --silent \
                      --insecure \
                      --output res.body \
                      --write-out %{http_code} \
                  > res.status_code 2> res.errors

                  echo "Status: $(cat res.status_code)"
                  echo "Body: $(cat res.body)"
                  if [[ $(cat res.status_code) -ne 201 ]]; then exit 1; fi

    migrate-db:
        needs: [create-new-db]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout branch
              uses: actions/checkout@v2
              with:
                  ref: ${{ env.migration_source_branch }}

            - name: Setup Node.js environment
              uses: actions/setup-node@v4
              with:
                  node-version: 16.x
                  cache: 'npm'
                  cache-dependency-path: server/package-lock.json

            - run: npm ci
              shell: bash
              working-directory: ./server

            - run: npx prisma migrate deploy
              shell: bash
              working-directory: ./server
              env:
                  DATABASE_URL: postgresql://${{ env.db_user }}:${{ env.db_password }}@${{ env.neon_project_id }}.cloud.neon.tech:5432/${{ env.target_db_name }}

    copy-data:
        runs-on: ubuntu-latest
        needs: [migrate-db]
        steps:
            - name: Copy the source database into the target database
              env:
                  api_base_url: https://bb-floyd-playground-app.azurewebsites.net/api
              run: |
                  curl -X POST "${{ env.api_base_url }}/copy-db?code=${{ env.azure_function_key }}" \
                      -H 'Content-Type: application/json' \
                      -d '{ 
                        "sourceDbName": "${{ env.source_db_name }}", "targetDbName": "${{ env.target_db_name }}",
                        "dbUrl": "postgres://${{ env.db_user }}:${{ env.db_password }}@${{ env.neon_project_id }}.cloud.neon.tech/?options=project%3D${{ env.neon_project_id }}"
                      }' \
                      --insecure \
                      --output res.body \
                      --write-out %{http_code} \
                  > res.status_code 2> res.errors

                  echo "Status: $(cat res.status_code)"
                  echo "Body: $(cat res.body)"
                  if [[ $(cat res.status_code) -ne 200 ]]; then exit 1; fi